#include "Bus.h"
#include "CPU.h"
#include <SDL.h>
#include <cassert>
#include <cstdint>
#include <vector>

void test_ops_working_together()
{
    auto bus = EM::Bus();
    bus.cpu.load_and_run(std::vector<uint8_t>{0xa9, 0xc0, 0xaa, 0xe8, 0x00});
    assert(0xc1 == bus.cpu.registers.x);
}

void test_0xa9_lda_immediate_load_data()
{
    auto bus = EM::Bus();
    bus.cpu.load_and_run(std::vector<uint8_t>{0xa9, 0x05, 0x00});

    assert(0x5 == bus.cpu.registers.a);
    assert(0x5 == bus.cpu.read(0x8001));
    assert(0b00 == (bus.cpu.registers.p & 0b0000'0010));
    assert(0b00 == (bus.cpu.registers.p & 0b0000'0000));
}

void test_5_ops_working_together()
{
    auto bus = EM::Bus();
    bus.cpu.load_and_run(std::vector<uint8_t>{0xa9, 0xc0, 0xaa, 0xe8, 0x00});
    assert(0xc1 == bus.cpu.registers.x);
}

void test_0xaa_tax_move_to_x()
{
    auto bus = EM::Bus();
    bus.cpu.load(std::vector<uint8_t>{0xaa, 0x00});
    bus.cpu.reset();
    bus.cpu.registers.a = 10;
    bus.cpu.run();
    assert(10 == bus.cpu.registers.x);
}

void test_inx_overflow()
{
    auto bus = EM::Bus();
    bus.cpu.load(std::vector<uint8_t>{0xe8, 0xe8, 0x00});
    bus.cpu.reset();
    bus.cpu.registers.x = 0xff;
    bus.cpu.run();
    assert(1 == bus.cpu.registers.x);
}

void test_lda_from_memory()
{
    auto bus = EM::Bus();
    bus.cpu.write(0x10, 0x55);
    bus.cpu.load_and_run(std::vector<uint8_t>{0xa5, 0x10, 0x00});
    assert(0x55 == bus.cpu.registers.a);
}

void test_game()
{
    auto bus = EM::Bus();
    std::vector<uint8_t> game_code{
        0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85, 0x02, 0xa9,
        0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85,
        0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe, 0x29, 0x03, 0x18, 0x69, 0x02, 0x85,
        0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3, 0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20,
        0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0,
        0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60, 0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9,
        0x08, 0x24, 0x02, 0xd0, 0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04,
        0x85, 0x02, 0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
        0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03,
        0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11,
        0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c, 0x35, 0x07, 0x60, 0xa6, 0x03, 0xca,
        0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02, 0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0,
        0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9, 0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01,
        0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6, 0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69,
        0x20, 0x85, 0x10, 0xb0, 0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5,
        0x10, 0x29, 0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
        0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea, 0xea, 0xca,
        0xd0, 0xfb, 0x60};
    bus.cpu.load(game_code);
    bus.cpu.reset();
}

int main()
{

    // auto bus = EM::Bus();
    // bus.cpu.write(0x100, 0x10);
    // assert(0x10 == bus.cpu.read(0x100));
    // assert(0x10 == bus.ram[0x100]);
    //
    // const EM::OpCode *code = bus.cpu.get_opcode(0x1b);
    // std::cout << static_cast<unsigned>(code->code) << std::endl;
    // std::cout << code->mnemonic << std::endl;
    // std::cout << static_cast<unsigned>(code->len) << std::endl;

    // test_ops_working_together();
    // test_0xa9_lda_immediate_load_data();
    // test_0xaa_tax_move_to_x();
    // test_5_ops_working_together();
    // test_inx_overflow();
    // test_lda_from_memory();
    test_game();

    return 0;
}
